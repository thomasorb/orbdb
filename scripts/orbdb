#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orbdb

## Copyright (c) 2010-2015 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORBDB
##
## ORBDB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBDB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBDB.  If not, see <http://www.gnu.org/licenses/>.

#############################################
############ ORBDB script ###################
#############################################

# Manage and use ORB files database

import sys, os
from orbdb.core import OrbDB
import orbdb.core
import argparse
from argparse import ArgumentParser

def main(args):
    db = OrbDB(args.db_name)
    
    if args.subparser_name == 'append':
        if os.path.exists(args.append_list_path):
            db.append(args.append_list_path)
        else:
            print "Error: List file '{}' does not exist".format(
                args.append_list_path)
            sys.exit(2)

    if args.subparser_name == 'clean':
        check_yes = raw_input("Are you sure you want to clean the database ?\n type 'yes I want to clean the database': ")
        if check_yes == 'yes I want to clean the database':
            db.clean()
        else: print 'phiuu'

    if args.subparser_name == 'list-targets':
        db.list_targets()

    if args.subparser_name == 'list-dates':
        db.list_dates()

    ## if args.subparser_name == 'list':
    ##     db.list_rows(args.list_expr, args.list_order_key, args.list_file_type)

    ## if args.subparser_name == 'print':
    ##     db.print_rows(args.print_key, args.print_expr)

    if args.subparser_name == 'printall':
        keywords = 'OBJECT FILTER RUNID PI_NAME'
        if args.printall_step:
            keywords += ' SITSTEP'
        db.print_rows(keywords.split())


    if args.subparser_name == 'keys':
        for key in db.get_keys():
            print key
       
    

if __name__ == "__main__":

    parser = ArgumentParser(
        version=('ORB-version {}'.format(
            orbdb.core.__version__)),
        description="Manage and use a database of FITS files. This was created primarily to list and sort SITELLE's image files")

    parser.add_argument('db_name', help='Path to the database')


    subparsers = parser.add_subparsers(help='operation type', dest='subparser_name')

    parser_append = subparsers.add_parser('append', help='Append new files')
    parser_append.add_argument('append_list_path',
                               help='Path to a list of files to append')
    
    parser_clean = subparsers.add_parser('clean', help='Clean database')

    parser_printall = subparsers.add_parser('printall', help='Print all basic keywords (OBJECT FILTER RUNID)')
    parser_printall.add_argument(
        '--step', action='store_true', dest="printall_step", default=False, 
        help="Add SITSTEP to the printed keywords")
    
    
    ## parser_print = subparsers.add_parser('print', help='Print keywords')
    ## parser_print.add_argument(
    ##     '-f',dest="print_expr", default=None, type=str,
    ##     help="Filter expression based on keywords (it is best to use '' around the expression to avoid errors). e.g.: OBJNAME=NGC7317. Permitted operations are '='.")
    ## parser_print.add_argument('print_key', help='keywords to print', nargs='+')
    

    ## parser_list = subparsers.add_parser('list', help='List files')
    ## parser_list.add_argument('list_expr', help="Filter expression based on keywords (it is best to use '' around the expression to avoid errors). e.g.: OBJNAME=NGC7317. Permitted operations are '='.")
    ## parser_list.add_argument(
    ##     '--order',dest="list_order_key", default=None, type=str,
    ##     help="Order files using the given keyword. e.g.: --order SITSTEP. If None given returned files won't be ordered. If two files have the same index, only the last one is kept")
    ## parser_list.add_argument(
    ##     '--type',dest="list_file_type", default=None, type=str,
    ##     choices=['o', 'a', 'x', 'f', 'c'],
    ##     help="Return only a certain file type")

    ## parser_list = subparsers.add_parser('keys', help='List all recorded keys')

    parser_list = subparsers.add_parser('list-targets', help='List scans by target name')
    parser_list = subparsers.add_parser('list-dates', help='List scans by date')

    
    if len(sys.argv) < 2:
        parser.print_usage()
        sys.exit(2)
        
    args=parser.parse_args()
    
    main(args)
